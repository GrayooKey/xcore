
var brower_info                     =     {
                                              "sys"      :    null,
	                                          "type"     :    null,
	                                          "link"     :    null
                                          };
/* */
var print_log                       =     true;
var websocket_url                   =     'ws://h5.xf-yun.com/tts.do'; 
var reconnection                    =     false;
var reconnection_delay              =     999999;
var force_new_connection            =     true;
var buffer_length                   =     0;
var tts_params_obj                  =     null;
this.node                           =     null;
var tts_session_id                  =     null;
var tts_text_ready                  =     null;
var func_on_tts_process             =     null;
var func_on_tts_result              =     null;
var browser_id                      =     new Fingerprint().get();
var is_re_request					=	  false;
var request_synid					=	  null;

var ua = navigator.userAgent.toLowerCase();
if(((/msie/.test(ua) && !/opera/.test(ua)) || ((/msie/.test(ua)||/trident/.test(ua)) && !/opera/.test(ua)))) 
  brower_info.type = 'ie';
else if(ua.match(/firefox\/([\d.]+)/)){
	 brower_info.type = 'firefox';
}
else if(ua.match(/chrome\/([\d.]+)/))
  brower_info.type = 'chrome';
else if(ua.match(/opera.([\d.]+)/))
  brower_info.type = 'opera';
else if(ua.match(/version\/([\d.]+).*safari/))
  brower_info.type = 'safari';
else 
  brower_info.type = 'other';
  
if(!!ua.match(/AppleWebKit.*Mobile.*/)||!!ua.match(/AppleWebKit/))
  brower_info.sys = 'mobile';
else if(!!ua.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/))
  brower_info.sys = 'ios';
else if(ua.indexOf('Android') > -1 || ua.indexOf('Linux') > -1)
  brower_info.sys = 'android';
else if(ua.indexOf('iPhone') > -1 || ua.indexOf('Mac') > -1)
  brower_info.sys = 'iPhone';
else if(ua.indexOf('iPad') > -1)
  brower_info.sys = 'iPad';
else if(navigator.userAgent.indexOf('MicroMessenger') > -1)
  brower_info.sys = 'Weixin';
else 
  brower_info.sys = 'other';

//if(brower_info.type == 'ie' || ((brower_info.type == 'chrome' || brower_info.type == 'opera') &&  brower_info.sys != 'other'))
//{
  brower_info.link = 'mp3';
//}else if(brower_info.sys == 'Weixin'){
  //brower_info.link = 'mp3';
//}

function register_connection_listener()
{
	window.socket.onopen = function () {
        console.log("connected to server ...");
		var json = {"ver" : "1.0", "sub" : "tts", "cmd" : "ssb",  "synid" : tts_params_obj.synid , "msg" : "request", "appid": tts_params_obj.appid, "appkey":tts_params_obj.appkey, "data" : { "params" : tts_params_obj.params , "text" : tts_text_ready}};
		console.log(tts_params_obj.params);
		console.log(JSON.stringify(json));
		window.socket.send(JSON.stringify(json));
    }

    window.socket.onclose = function (e) {
		console.log("client disconnect ...");
    }
	
	window.socket.onmessage = function (obj) {
		console.log("on message");
		console.log(obj);
		var json = strToJson(obj.data);
		var cmd = json.cmd;
		var data = json.data;
		var ret = 0;
		console.log("json : "+JSON.stringify(json));
		console.log("cmd : " + cmd);
		console.log("data : " + data);
		is_re_request = true;
		ttsGetAudioStream(data);
	}
}

function LOGCAT(str)
{
    if(print_log) console.log('[' + getCurrentTime() + ']  ' + str);
}

function getCurrentTime()
{ 
    var now = new Date();      
    var year = now.getFullYear();      
    var month = now.getMonth() + 1;    
    var day = now.getDate();           
    var hh = now.getHours();          
    var mm = now.getMinutes();          
       
    var clock = year + "-";      
    if(month < 10)
        clock += "0";
    clock += month + "-";       
    if(day < 10)
        clock += "0";           
    clock += day + " ";   
    if(hh < 10)
        clock += "0";       
    clock += hh + ":";
    if (mm < 10) 
	    clock += '0'; 
	clock += mm; 
    return(clock); 
}

sendRequestMessage = function(){
	console.log("connected to server ...");
	var json = {"ver" : "1.0", "sub" : "tts", "cmd" : "ssb", "synid" : tts_params_obj.synid , "msg" : "request", "appid": tts_params_obj.appid, "appkey":tts_params_obj.appkey,"data" : { "params" : tts_params_obj.params ,"text" : tts_text_ready}};
	console.log(tts_params_obj.params);
	console.log(JSON.stringify(json));
	window.socket.send(JSON.stringify(json));
};

function initTtsParams(cfg)
{
    if( cfg.reconnection != undefined && cfg.reconnection != null ) reconnection = cfg.reconnection;
    if( cfg.reconnection_delay != undefined && cfg.reconnection_delay != null ) reconnection_delay = cfg.reconnectionDelay;
}

function IFlyTtsSession(cfg){
    initTtsParams(cfg);

	/*
	 * start a speech synthesize session, schedule: start->send text -> return audio url
	 * ->on end -> next session
	 * @params         parameters for synthesize
	 * @content        content for synthesize
	 * @funcOnResult   on volume listener
	 * @funcOnProcess  on process
	 */
	this.start = function(params, content, funcOnResult, funcOnProcess)
	{	
	    iflytek_tts_start(params, content, funcOnResult, funcOnProcess);
	}

	/*
	 * stop synthsize session
	 */
	this.stop = function()
	{
		
	}

	/*
	 * cancel synthsize session
	 */
	this.cancel = function()
	{
		iflytek_tts_cancel();
	}
}

function iflytek_tts_start(params, content, funcOnResult, funcOnProcess)
{
    if( arguments.length < 3 )
	{
	   LOGCAT("INPUT PARAMETERS ERROR");
	   return -1;
	} 

	if(funcOnProcess != undefined) func_on_tts_process = funcOnProcess;
	func_on_tts_result = funcOnResult;
	tts_params_obj = params;
	tts_text_ready = content;

	if(window.socket == null || window.socket == undefined || window.socket.readyState != 1)
	{
		console.log( websocket_url );
		window.socket = new WebSocket(websocket_url);
	}

	register_connection_listener();

	if (is_re_request) {
		sendRequestMessage();
	};
}

function iflytek_tts_cancel()
{
	is_re_request = true;
	LOGCAT("----------tts cancel----------");
}

/*
 * request session end
 */
function ttsSessionEnd(wait_time)
{	
	is_re_request = true;
	LOGCAT("----------session end----------");
}

function strToJson(str)
{
	var json = eval('(' + str + ')');
	return json;
}

function ttsGetAudioStream(data)
{
	if (data.audioKey != null && data.audioKey != "") {
		func_on_tts_result(0, {"audio_url" : data.audioKey, "duration" : ""});
	} else {
		console.log("data.audioKey is null");
	}
	ttsSessionEnd(0);
}